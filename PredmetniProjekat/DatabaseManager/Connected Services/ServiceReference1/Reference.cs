//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference1.AI))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference1.DO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference1.AO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference1.DI))]
    public partial class Tag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Address {
            get {
                return this.AddressField;
            }
            set {
                if ((this.AddressField.Equals(value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AI", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class AI : DatabaseManager.ServiceReference1.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference1.Alarm[] AlarmsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference1.Driver DriverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScanTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference1.Alarm[] Alarms {
            get {
                return this.AlarmsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmsField, value) != true)) {
                    this.AlarmsField = value;
                    this.RaisePropertyChanged("Alarms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference1.Driver Driver {
            get {
                return this.DriverField;
            }
            set {
                if ((this.DriverField.Equals(value) != true)) {
                    this.DriverField = value;
                    this.RaisePropertyChanged("Driver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnOff {
            get {
                return this.OnOffField;
            }
            set {
                if ((this.OnOffField.Equals(value) != true)) {
                    this.OnOffField = value;
                    this.RaisePropertyChanged("OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScanTime {
            get {
                return this.ScanTimeField;
            }
            set {
                if ((this.ScanTimeField.Equals(value) != true)) {
                    this.ScanTimeField = value;
                    this.RaisePropertyChanged("ScanTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DO", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class DO : DatabaseManager.ServiceReference1.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InitialValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InitialValue {
            get {
                return this.InitialValueField;
            }
            set {
                if ((this.InitialValueField.Equals(value) != true)) {
                    this.InitialValueField = value;
                    this.RaisePropertyChanged("InitialValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AO", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class AO : DatabaseManager.ServiceReference1.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double InitialValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InitialValue {
            get {
                return this.InitialValueField;
            }
            set {
                if ((this.InitialValueField.Equals(value) != true)) {
                    this.InitialValueField = value;
                    this.RaisePropertyChanged("InitialValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DI", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class DI : DatabaseManager.ServiceReference1.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference1.Alarm[] AlarmsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference1.Driver DriverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScanTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference1.Alarm[] Alarms {
            get {
                return this.AlarmsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmsField, value) != true)) {
                    this.AlarmsField = value;
                    this.RaisePropertyChanged("Alarms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference1.Driver Driver {
            get {
                return this.DriverField;
            }
            set {
                if ((this.DriverField.Equals(value) != true)) {
                    this.DriverField = value;
                    this.RaisePropertyChanged("Driver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnOff {
            get {
                return this.OnOffField;
            }
            set {
                if ((this.OnOffField.Equals(value) != true)) {
                    this.OnOffField = value;
                    this.RaisePropertyChanged("OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScanTime {
            get {
                return this.ScanTimeField;
            }
            set {
                if ((this.ScanTimeField.Equals(value) != true)) {
                    this.ScanTimeField = value;
                    this.RaisePropertyChanged("ScanTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class Alarm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TagIdField, value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Driver", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    public enum Driver : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SimulationDriver = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RealTimeDriver = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OutputDriver = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDBMService")]
    public interface IDBMService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Registration", ReplyAction="http://tempuri.org/IAuthentication/RegistrationResponse")]
        bool Registration(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Registration", ReplyAction="http://tempuri.org/IAuthentication/RegistrationResponse")]
        System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsAdmin", ReplyAction="http://tempuri.org/IAuthentication/IsAdminResponse")]
        bool IsAdmin(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsAdmin", ReplyAction="http://tempuri.org/IAuthentication/IsAdminResponse")]
        System.Threading.Tasks.Task<bool> IsAdminAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        bool Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/GetSomeMessage", ReplyAction="http://tempuri.org/IAuthentication/GetSomeMessageResponse")]
        string GetSomeMessage(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/GetSomeMessage", ReplyAction="http://tempuri.org/IAuthentication/GetSomeMessageResponse")]
        System.Threading.Tasks.Task<string> GetSomeMessageAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddDI", ReplyAction="http://tempuri.org/IDBMService/AddDIResponse")]
        bool AddDI(DatabaseManager.ServiceReference1.DI di, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddDI", ReplyAction="http://tempuri.org/IDBMService/AddDIResponse")]
        System.Threading.Tasks.Task<bool> AddDIAsync(DatabaseManager.ServiceReference1.DI di, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddAI", ReplyAction="http://tempuri.org/IDBMService/AddAIResponse")]
        bool AddAI(DatabaseManager.ServiceReference1.AI ai, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddAI", ReplyAction="http://tempuri.org/IDBMService/AddAIResponse")]
        System.Threading.Tasks.Task<bool> AddAIAsync(DatabaseManager.ServiceReference1.AI ai, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddDO", ReplyAction="http://tempuri.org/IDBMService/AddDOResponse")]
        bool AddDO(DatabaseManager.ServiceReference1.DO dout, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddDO", ReplyAction="http://tempuri.org/IDBMService/AddDOResponse")]
        System.Threading.Tasks.Task<bool> AddDOAsync(DatabaseManager.ServiceReference1.DO dout, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddAO", ReplyAction="http://tempuri.org/IDBMService/AddAOResponse")]
        bool AddAO(DatabaseManager.ServiceReference1.AO aout, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddAO", ReplyAction="http://tempuri.org/IDBMService/AddAOResponse")]
        System.Threading.Tasks.Task<bool> AddAOAsync(DatabaseManager.ServiceReference1.AO aout, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/CheckFirstStart", ReplyAction="http://tempuri.org/IDBMService/CheckFirstStartResponse")]
        bool CheckFirstStart();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/CheckFirstStart", ReplyAction="http://tempuri.org/IDBMService/CheckFirstStartResponse")]
        System.Threading.Tasks.Task<bool> CheckFirstStartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddTag", ReplyAction="http://tempuri.org/IDBMService/AddTagResponse")]
        bool AddTag(DatabaseManager.ServiceReference1.Tag t, string tagType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddTag", ReplyAction="http://tempuri.org/IDBMService/AddTagResponse")]
        System.Threading.Tasks.Task<bool> AddTagAsync(DatabaseManager.ServiceReference1.Tag t, string tagType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/RemoveTag", ReplyAction="http://tempuri.org/IDBMService/RemoveTagResponse")]
        bool RemoveTag(string id, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/RemoveTag", ReplyAction="http://tempuri.org/IDBMService/RemoveTagResponse")]
        System.Threading.Tasks.Task<bool> RemoveTagAsync(string id, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/ChangeTag", ReplyAction="http://tempuri.org/IDBMService/ChangeTagResponse")]
        bool ChangeTag(string id, double value, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/ChangeTag", ReplyAction="http://tempuri.org/IDBMService/ChangeTagResponse")]
        System.Threading.Tasks.Task<bool> ChangeTagAsync(string id, double value, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/GetOutputValues", ReplyAction="http://tempuri.org/IDBMService/GetOutputValuesResponse")]
        System.Collections.Generic.Dictionary<string, double> GetOutputValues(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/GetOutputValues", ReplyAction="http://tempuri.org/IDBMService/GetOutputValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> GetOutputValuesAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/TurnScanOnOff", ReplyAction="http://tempuri.org/IDBMService/TurnScanOnOffResponse")]
        bool TurnScanOnOff(string id, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/TurnScanOnOff", ReplyAction="http://tempuri.org/IDBMService/TurnScanOnOffResponse")]
        System.Threading.Tasks.Task<bool> TurnScanOnOffAsync(string id, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddAlarm", ReplyAction="http://tempuri.org/IDBMService/AddAlarmResponse")]
        bool AddAlarm(DatabaseManager.ServiceReference1.Alarm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/AddAlarm", ReplyAction="http://tempuri.org/IDBMService/AddAlarmResponse")]
        System.Threading.Tasks.Task<bool> AddAlarmAsync(DatabaseManager.ServiceReference1.Alarm a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/RemoveAlarm", ReplyAction="http://tempuri.org/IDBMService/RemoveAlarmResponse")]
        bool RemoveAlarm(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMService/RemoveAlarm", ReplyAction="http://tempuri.org/IDBMService/RemoveAlarmResponse")]
        System.Threading.Tasks.Task<bool> RemoveAlarmAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBMServiceChannel : DatabaseManager.ServiceReference1.IDBMService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBMServiceClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference1.IDBMService>, DatabaseManager.ServiceReference1.IDBMService {
        
        public DBMServiceClient() {
        }
        
        public DBMServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBMServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBMServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Registration(string username, string password) {
            return base.Channel.Registration(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password) {
            return base.Channel.RegistrationAsync(username, password);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool IsAdmin(string username) {
            return base.Channel.IsAdmin(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsAdminAsync(string username) {
            return base.Channel.IsAdminAsync(username);
        }
        
        public bool Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
        
        public string GetSomeMessage(string token) {
            return base.Channel.GetSomeMessage(token);
        }
        
        public System.Threading.Tasks.Task<string> GetSomeMessageAsync(string token) {
            return base.Channel.GetSomeMessageAsync(token);
        }
        
        public bool AddDI(DatabaseManager.ServiceReference1.DI di, string username) {
            return base.Channel.AddDI(di, username);
        }
        
        public System.Threading.Tasks.Task<bool> AddDIAsync(DatabaseManager.ServiceReference1.DI di, string username) {
            return base.Channel.AddDIAsync(di, username);
        }
        
        public bool AddAI(DatabaseManager.ServiceReference1.AI ai, string username) {
            return base.Channel.AddAI(ai, username);
        }
        
        public System.Threading.Tasks.Task<bool> AddAIAsync(DatabaseManager.ServiceReference1.AI ai, string username) {
            return base.Channel.AddAIAsync(ai, username);
        }
        
        public bool AddDO(DatabaseManager.ServiceReference1.DO dout, string username) {
            return base.Channel.AddDO(dout, username);
        }
        
        public System.Threading.Tasks.Task<bool> AddDOAsync(DatabaseManager.ServiceReference1.DO dout, string username) {
            return base.Channel.AddDOAsync(dout, username);
        }
        
        public bool AddAO(DatabaseManager.ServiceReference1.AO aout, string username) {
            return base.Channel.AddAO(aout, username);
        }
        
        public System.Threading.Tasks.Task<bool> AddAOAsync(DatabaseManager.ServiceReference1.AO aout, string username) {
            return base.Channel.AddAOAsync(aout, username);
        }
        
        public bool CheckFirstStart() {
            return base.Channel.CheckFirstStart();
        }
        
        public System.Threading.Tasks.Task<bool> CheckFirstStartAsync() {
            return base.Channel.CheckFirstStartAsync();
        }
        
        public bool AddTag(DatabaseManager.ServiceReference1.Tag t, string tagType) {
            return base.Channel.AddTag(t, tagType);
        }
        
        public System.Threading.Tasks.Task<bool> AddTagAsync(DatabaseManager.ServiceReference1.Tag t, string tagType) {
            return base.Channel.AddTagAsync(t, tagType);
        }
        
        public bool RemoveTag(string id, string username) {
            return base.Channel.RemoveTag(id, username);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTagAsync(string id, string username) {
            return base.Channel.RemoveTagAsync(id, username);
        }
        
        public bool ChangeTag(string id, double value, string username) {
            return base.Channel.ChangeTag(id, value, username);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeTagAsync(string id, double value, string username) {
            return base.Channel.ChangeTagAsync(id, value, username);
        }
        
        public System.Collections.Generic.Dictionary<string, double> GetOutputValues(string username) {
            return base.Channel.GetOutputValues(username);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> GetOutputValuesAsync(string username) {
            return base.Channel.GetOutputValuesAsync(username);
        }
        
        public bool TurnScanOnOff(string id, string username) {
            return base.Channel.TurnScanOnOff(id, username);
        }
        
        public System.Threading.Tasks.Task<bool> TurnScanOnOffAsync(string id, string username) {
            return base.Channel.TurnScanOnOffAsync(id, username);
        }
        
        public bool AddAlarm(DatabaseManager.ServiceReference1.Alarm a) {
            return base.Channel.AddAlarm(a);
        }
        
        public System.Threading.Tasks.Task<bool> AddAlarmAsync(DatabaseManager.ServiceReference1.Alarm a) {
            return base.Channel.AddAlarmAsync(a);
        }
        
        public bool RemoveAlarm(string id) {
            return base.Channel.RemoveAlarm(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAlarmAsync(string id) {
            return base.Channel.RemoveAlarmAsync(id);
        }
    }
}
